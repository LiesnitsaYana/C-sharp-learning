using System;

namespace LessonTask10_Triangle
{
    public struct Point
    {
        public int X, Y;

        public Point(int x, int y)
        {
            X = x;
            Y = y;
        }

        public void ToString(Point p)
        {
            Console.WriteLine($"Point: {p.X};{p.Y}");
        }
    }
}
using System;

namespace LessonTask10_Triangle
{
    public class Triangle
    {
        private static Point vertex1, vertex2, vertex3;

        public Triangle(Point a, Point b, Point c)
        {
            vertex1 = a;
            vertex2 = b;
            vertex3 = c;
        }

        public double Distance(Point a, Point b)
        {
            double distance = Math.Sqrt(Math.Pow(b.X - a.X, 2) + Math.Pow(b.Y - a.Y, 2));
            return Math.Round(distance, 2);
        }

        public double Perimetr()
        {
            double perimetr = Distance(vertex1,vertex2) + Distance(vertex2, vertex3) 
                                                        + Distance(vertex3, vertex1);
            return perimetr;
        }

        public double Square()
        {
            double halfOfPerimetr = Perimetr() / 2;
            double square = Math.Sqrt(halfOfPerimetr * (halfOfPerimetr - Distance(vertex1, vertex2)) 
                                                     *(halfOfPerimetr - Distance(vertex2, vertex3)) 
                                                     *(halfOfPerimetr - Distance(vertex3, vertex1)));
            return square;
        }

        public void Print()
        {
            Console.WriteLine($"Perimeter = {Perimetr()}, square = {Square()}.");
        }
    }
}
using System;
using System.Collections.Generic;

namespace LessonTask10_Triangle
{
    class Program
    {
        static void Main(string[] args)
        {
            List<Triangle> triangles = new List<Triangle>();
            triangles.Add(new Triangle(new Point(6, 7), new Point(5, 3), new Point(8, 5)));
            triangles.Add(new Triangle(new Point(1, 2), new Point(-5, -4), new Point(2, 7)));
            triangles.Add(new Triangle(new Point(0, 1), new Point(2, 0), new Point(1, 1)));

            foreach (var triangle in triangles)
            {
                triangle.Print();
            }

            Console.ReadKey();
        }
    }
}
////////////Unit Tests
using System;
using LessonTask10_Triangle;
using Microsoft.VisualStudio.TestTools.UnitTesting;

namespace TriangleTests
{
    [TestClass]
    public class UnitTest1
    {
        Point p1 = new Point(1, 2);
        Point p2 = new Point(2, 3);
        Point p3 = new Point(3, 4);

        [TestMethod]
        public void DistanceMethodChecking()
        {
            Triangle tr = new Triangle(p1, p2, p3);
            double expected = 2;
            double actual = tr.Distance(p1, p2);

            Assert.AreEqual(expected, actual);
        }

        [TestMethod]
        public void PerimetrMethodChecking()
        {
            Triangle tr = new Triangle(p1, p2, p3);
            double expected = 12;
            double actual = tr.Perimetr();

            Assert.AreEqual(expected, actual);
        }

        [TestMethod]
        public void SquareMethodChecking()
        {
            Triangle tr = new Triangle(p1, p2, p3);
            double expected = 192;
            double actual = tr.Square();

            Assert.AreEqual(expected, actual);
        }
    }
}
//////////////////////For class Person
using System;
using HomeWork4;
using Microsoft.VisualStudio.TestTools.UnitTesting;

namespace PersonTests
{
    [TestClass]
    public class UnitTest1
    {
        Person person = new Person("John", new DateTime(2010, 5, 5));

        [TestMethod]
        public void AgeCounterChecking()
        {
            int expected = 10;
            int actual = person.AgeCounter();
        }
    }
}