using System;

namespace HomeWork8
{
    abstract class Shape
    {
        public string Name { get; set; }

        public Shape(string name)
        {
            Name = name;
        }

        public virtual double Area()
        {
            double area = 0;
            return area;
        }

        public virtual double Perimeter()
        {
            double perimeter = 0;
            return perimeter;
        }

        public virtual void Print()
        {
            Console.WriteLine(Name);
        }
    }
}
using System;

namespace HomeWork8
{
    class Circle : Shape, IComparable
    {
        private double _radius;
        private double PI = 3.14;

        public double Radius
        {
            get { return _radius; }
            set { _radius = value; }
        }

        public Circle(string name, double _radius) : base(name)
        {
            Radius = _radius;
        }

        public override double Area()
        {
            double area = PI * _radius * _radius;
            return area;
        }

        public override double Perimeter()
        {
            double perimeter = 2 * PI * _radius;
            return perimeter;
        }

        public override void Print()
        {
            Console.WriteLine("This shape is " + Name + "\nIt's area is: " + Area() + "\nIt's perimeter is: " + Perimeter() + "\n");
        }

        public int CompareTo(object obj)
        {
            Square square = obj as Square;
            Circle circle = obj as Circle;
            if (square != null)
                return Area().CompareTo(square.Area());
            else if (circle != null)
                return Area().CompareTo(circle.Area());
            else throw new ArgumentException("There is no shape!");
        }

        public override string ToString()
        {
            return "This shape is " + Name + ". It's area is: " + Area() + ". It's perimeter is: " + Perimeter() + "\n";
        }
    }
}
using System;

namespace HomeWork8
{
    class Square : Shape, IComparable
    {
        private double _side;

        public double Side
        {
            get { return _side; }
            set { _side = value; }
        }

        public Square(string name, double _side) : base(name)
        {
            Side = _side;
        }

        public override double Area()
        {
            double area = _side * _side;
            return area;
        }

        public override double Perimeter()
        {
            double perimeter = 4 * _side;
            return perimeter;
        }

        public override void Print()
        {
            Console.WriteLine("This shape is " + Name + "\nIt's area is: " + Area() + "\nIt's perimeter is: " + Perimeter() + "\n");
        }

        public int CompareTo(object obj)
        {
            Square square = obj as Square;
            Circle circle = obj as Circle;
            if (square != null)
                return Area().CompareTo(square.Area());
            else if (circle != null)
                return Area().CompareTo(circle.Area());
            else throw new ArgumentException("There is no shape!");
        }

        public override string ToString()
        {
            return "This shape is " + Name + ". It's area is: " + Area() + ". It's perimeter is: " + Perimeter() + "\n";
        }
    }
}
using System;
using System.Collections.Generic;

namespace HomeWork8
{
    class Program
    {
        static void Main(string[] args)
        {
            List<Shape> shapes = new List<Shape>();

            Console.WriteLine("Enter data for shapes 10 times. It should be name of the shape (like circle and square) " +
                              "and a number (like radius or side).");
            try
            {
                for (int i = 0; i < 5; i++)
                {
                    Console.WriteLine("Enter the name for your Circle: ");
                    string circleName = Console.ReadLine();
                    Console.WriteLine("Enter the radius for your Circle: ");
                    double circleRadius = Convert.ToDouble(Console.ReadLine());
                    shapes.Add(new Circle(circleName, circleRadius));
                }
            }
            catch (FormatException)
            {
                Console.WriteLine("Wrong format!");
                Console.ReadKey();
            }

            try
            {
                for (int i = 0; i < 5; i++)
                {
                    Console.WriteLine("Enter the name for your Square: ");
                    string squareName = Console.ReadLine();
                    Console.WriteLine("Enter the side for your Square: ");
                    double squareSide = Convert.ToDouble(Console.ReadLine());
                    shapes.Add(new Square(squareName, squareSide));
                }
            }
            catch (FormatException)
            {
                Console.WriteLine("Wrong format!");
                Console.ReadKey();
            }

            //=======

            foreach (var sh in shapes)
            {
                sh.Print();
            }

            //=======

            var maxPerim = shapes[0];
            foreach (var sh in shapes)
            {
                if (sh.Perimeter() >= maxPerim.Perimeter())
                {
                    maxPerim = sh;
                }
            }
            Console.WriteLine($"Max perimeter is {maxPerim.Perimeter()} and this is {maxPerim.Name} shape\n");

            //=======

            shapes.Sort();

            //=======

            Console.WriteLine("This is the full list of shapes below: ");
            foreach (var shape in shapes)
            {
                Console.WriteLine(shape);
            }

            Console.ReadKey();
        }
    }
}
